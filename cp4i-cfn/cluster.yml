AWSTemplateFormatVersion: '2010-09-09'
Description: Template for CP4I deployment.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Network Settings
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - BootNodeAccessCIDR
          - MachineCIDR
          - ClusterNetworkCIDR
          - ClusterNetworkHostPrefix
          - ServiceNetworkCIDR
      - Label:
          default: AZ
        Parameters:
          - NumberOfAZs
          - AvailabilityZones
      - Label: 
          default: Instance Configuration
        Parameters:
          - Tenancy
          - KeyPairName
      - Label: 
          default: Openshift Configuration
        Parameters:
          - OpenshiftVersion
          - WorkerVMSize
          - WorkerNodeQuantity
          - PrivateCluster
          - EnableFips
          - StorageType
          - ClusterName
          - RosaToken
      - Label: 
          default: Cloud Pak for Integration
        Parameters:
          - EntitlementKey
          - LicenseAgreement
          - CloudPakVersion
          - PlatformUiNamespace
          - CloudPakLicense
Parameters:
  Tenancy:
    Description: >-
       Amazon EC2 instances tenancy type, default/dedicated.
    Type: String
    AllowedValues:
      - "default"
      - "dedicated"
    Default: "default"
  VPCID:
    Description: The ID of your existing Virtual Private Cloud (VPC) for deployment.
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1ID:
    Description: The ID of the private subnet in Availability Zone a for the workload (e.g., subnet-a0246dcd).
    Type: String
  PrivateSubnet2ID:
    Description: The ID of the private subnet in Availability Zone b for the workload (e.g., subnet-b1f432cd).
    Type: String
  PrivateSubnet3ID:
    Description: The ID of the private subnet in Availability Zone c for the workload (e.g., subnet-b1f4a2cd).
    Type: String
  PublicSubnet1ID:
    Description: The ID of the public subnet in Availability Zone a for the ELB load balancer (e.g., subnet-9bc642ac).
    Type: String
  PublicSubnet2ID:
    Description: The ID of the public subnet in Availability Zone b for the ELB load balancer (e.g., subnet-e3246d8e).
    Type: String
  PublicSubnet3ID:
    Description: The ID of the public subnet in Availability Zone c for the ELB load balancer (e.g., subnet-e324ad8e).
    Type: String
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you
      to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  BootNodeAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access boot node instance. We recommend that you set this value to a trusted IP range. The value `0.0.0.0/0` permits all IP addresses to access. Additional values can be added post-deployment from the Amazon EC2 console.
    Type: String
  MachineCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The Cluster Network CIDR IP range that is used as IP address pools for machines (e.g., 10.0.0.0/16).
    Type: String
  ClusterNetworkCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The Cluster Network CIDR IP range that is used as IP address pools for pods (e.g., 10.128.0.0/16).
    Type: String
  ClusterNetworkHostPrefix:
    Description: Cluster network host prefix.
    Type: Number
    Default: 23
  ServiceNetworkCIDR: 
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: The service network CIDR IP range (e.g., 172.30.0.0/16).
    Type: String
  OpenshiftVersion:
    Description: Choose Red Hat OpenShift Service on AWS (ROSA) Version
    Type: String
    Default: "4.12.30"
  ClusterName:
    Default: "cp4irosa"
    Description: Custom cluster name for kubernetes.io/cluster/tags.
    Type: String
    AllowedPattern: ^[0-9a-z-]*$
    MaxLength: 15
  RosaToken:
    Description: API token to authenticate against your Red Hat OpenShift Cluster Manager account. Download ROSA token from https://console.redhat.com/openshift/token/show
    Type: String
    AllowedPattern: \S+
    ConstraintDescription: RosaToken must have value
    NoEcho: 'true'
  WorkerVMSize:
    Description: The size of the worker nodes.
    ConstraintDescription: Must contain valid instance type
    Type: String
    AllowedValues:
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.24xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - r5.4xlarge
      - r5.9xlarge
      - r5.12xlarge
      - r5.18xlarge
      - r5.24xlarge
    Default: m5.4xlarge
  WorkerNodeQuantity:
    Description: The number of the worker nodes. Minimum of 3 nodes required for multi-zone deployment. It should multiple of 3.
    Type: Number
    Default: 3
  PrivateCluster:  
    Description: To Deploy a Private cluster select true and false for Public cluster
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  NumberOfAZs:  
    Default: 3
    Description: >-
      The number of Availability Zones to be used for the deployment. For a cluster to be highly available, three Availability Zones are needed to avoid a single point of failure.
    Type: Number
    AllowedValues:
      - 1
      - 3
  AvailabilityZones:
    Description: The list of Availability Zones to use for the subnets in the VPC. The Template uses one or three Availability Zones and preserves the logical order you specify.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  EnableFips:
    Description: Enable Fips for Openshift
    Type: String
    AllowedValues:
      - "false"
      - "true"
    Default: "false"
  StorageType:
    Description: Choose storage type to be configured.
    Type: String
    AllowedValues:
      - "efs"
    Default: "efs"
  EntitlementKey:
    Description: Entitlement key for the IBM Entitled Registry, used to pull the software images.
    Type: String 
    AllowedPattern: \S+
    ConstraintDescription: EntitlementKey must have value
    NoEcho: 'true'
  LicenseAgreement:
    Description: By accepting the license agreement you are accepting the terms and conditions of the license.  For more information about licenses, click this link https://ibm.biz/int-licenses
    Type: String
    Default: 'reject'
    AllowedValues:
      - "accept"
      - "reject"
    ConstraintDescription: must answer 'accept'
  PlatformUiNamespace:
    Description: Namespace where you want to install the Platform UI.
    Type: String
    Default: cp4i    
  CloudPakVersion:
    Description: Cloud Pak for Integration version.
    Type: String
    Default: "2022.2.1"
  CloudPakLicense:
    Description: IBM Cloud Pak for Integration 2022.2.1 (L-RJON-CD3JKX). IBM Cloud Pak for Integration Reserved 2022.2.1 (L-RJON-CJR2WN)
    Type: String
    AllowedValues:
      - "L-RJON-CD3JKX"
      - "L-RJON-CJR2WN"
    Default: "L-RJON-CD3JKX"


Mappings:
  AWSAMIRegionMap:
    us-east-1:
      BootNodeAmiId: ami-0adcf0020317f5ce0
    us-east-2:
      BootNodeAmiId: ami-092b43193629811af
    us-west-1:
      BootNodeAmiId: ami-0186e3fec9b0283ee
    us-west-2:
      BootNodeAmiId: ami-08970fb2e5767e3b8
    ap-south-1:
      BootNodeAmiId: ami-05c8ca4485f8b138a
    ap-northeast-3:
      BootNodeAmiId: ami-044921b7897a7e0da
    ap-northeast-2:
      BootNodeAmiId: ami-06c568b08b5a431d5
    ap-southeast-1:
      BootNodeAmiId: ami-051f0947e420652a9
    ap-southeast-2:
      BootNodeAmiId: ami-0808460885ff81045
    ap-northeast-1:
      BootNodeAmiId: ami-0f903fb156f24adbf
    ca-central-1:
      BootNodeAmiId: ami-0c3d3a230b9668c02
    eu-central-1:
      BootNodeAmiId: ami-0e7e134863fac4946
    eu-west-1:
      BootNodeAmiId: ami-0f0f1c02e5e4d9d9f
    eu-west-2:
      BootNodeAmiId: ami-035c5dc086849b5de
    eu-west-3:
      BootNodeAmiId: ami-0460bf124812bebfa
    eu-north-1:
      BootNodeAmiId: ami-06a2a41d455060f8b
    sa-east-1:
      BootNodeAmiId: ami-0c1b8b886626f940c

Rules: 
  LicenseAgreementRule:
    Assertions:
    - Assert:
        Fn::Contains:
        - - accept
        - Ref: LicenseAgreement
      AssertDescription: User must agree to the terms of the license agreement.

Conditions:
  3AZCondition: !Equals [!Ref NumberOfAZs, 3]
  AcceptLicense: !Equals [!Ref LicenseAgreement, 'accept']
  OCSCondition: !Equals [!Ref StorageType, 'ocs']
  EfsCondition: !Equals [!Ref StorageType, 'efs']

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: lambda-cleanUpLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:ListCommandInvocations
                  - ssm:ListCommands
                Resource: 
                  - '*'
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*-OpenshiftURL"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*_CleanupStatus"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/AWS-RunShellScript"
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*' 

  BootNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
        - PolicyName: openshift-policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - autoscaling:DescribeAutoScalingGroups
                  - ec2:AllocateAddress
                  - ec2:AssociateAddress
                  - ec2:AssociateDhcpOptions
                  - ec2:AssociateRouteTable
                  - ec2:AttachInternetGateway
                  - ec2:AttachNetworkInterface
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CopyImage
                  - ec2:CreateDhcpOptions
                  - ec2:CreateNetworkInterface
                  - ec2:CreateRoute
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:DeleteDhcpOptions
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteRoute
                  - ec2:DeleteSnapshot
                  - ec2:DeregisterImage
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - ec2:Describe*
                  - ec2:DetachInternetGateway
                  - ec2:DisassociateRouteTable
                  - ec2:GetConsoleOutput
                  - ec2:GetEbsDefaultKmsKeyId
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:ModifySubnetAttribute
                  - ec2:ModifyVpcAttribute
                  - ec2:ReleaseAddress
                  - ec2:ReplaceRouteTableAssociation
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RunInstances
                  - ec2:StartInstances
                  - ec2:AttachVolume
                  - ec2:ModifyVolume
                  - ec2:CreateVpcEndpointServiceConfiguration
                  - ec2:DeleteVpcEndpointServiceConfigurations
                  - ec2:DescribeVpcEndpointServiceConfigurations
                  - ec2:DescribeVpcEndpointServicePermissions
                  - ec2:DescribeVpcEndpointServices
                  - ec2:ModifyVpcEndpointServicePermissions
                  - "ec2-instance-connect:SendSerialConsoleSSHPublicKey"
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - ec2:CopySnapshot
                  - ec2:CreateNetworkInsightsPath
                  - ec2:CreateSnapshot
                  - ec2:CreateSnapshots
                  - ec2:DeleteNetworkInsightsAnalysis
                  - ec2:DeleteNetworkInsightsPath
                  - ec2:GetAssociatedIpv6PoolCidrs
                  - ec2:GetManagedPrefixListEntries
                  - ec2:GetSerialConsoleAccessStatus
                  - ec2:GetTransitGatewayAttachmentPropagations
                  - ec2:GetTransitGatewayMulticastDomainAssociations
                  - ec2:GetTransitGatewayPrefixListReferences
                  - ec2:GetTransitGatewayRouteTableAssociations
                  - ec2:GetTransitGatewayRouteTablePropagations
                  - ec2:SearchLocalGatewayRoutes
                  - ec2:SearchTransitGatewayMulticastGroups
                  - ec2:SearchTransitGatewayRoutes
                  - ec2:StartNetworkInsightsAnalysis
                Resource: "*"
              - Effect: "Deny"
                Action:
                  - ec2:TerminateInstances
                  - ec2:RebootInstances
                  - ec2:StopInstances
                  - ec2:DeleteSecurityGroup
                  - ec2:DetachVolume
                  - ec2:DeleteVolume
                  - ec2:DeleteTags
                Resource: "*"
                Condition:
                  StringNotLike:
                    ec2:ResourceTag/Name:
                      - !Sub "${ClusterName}*"
                      - osd-network-verifier
              - Effect: "Allow"
                Action: 
                  - elasticloadbalancing:*
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - iam:AddRoleToInstanceProfile
                  - iam:CreateInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:GetInstanceProfile
                  - iam:TagInstanceProfile
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:GetUser
                  - iam:ListAttachedRolePolicies
                  - iam:ListInstanceProfiles
                  - iam:ListInstanceProfilesForRole
                  - iam:ListRolePolicies
                  - iam:ListRoles
                  - iam:ListUserPolicies
                  - iam:ListUsers
                  - iam:PassRole
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:SimulatePrincipalPolicy
                  - iam:UntagRole
                  - iam:GetUserPolicy
                  - iam:ListAccessKeys
                  - iam:CreateServiceLinkedRole
                  - iam:GetOpenIDConnectProvider
                  - iam:ListRoleTags
                  - iam:AttachRolePolicy
                  - iam:CreateOpenIDConnectProvider
                  - iam:CreateRole
                  - iam:ListPolicies
                  - iam:ListPolicyTags
                  - iam:PutRolePermissionsBoundary
                  - iam:TagRole
                  - iam:GetPolicy
                  - iam:ListPolicyVersions
                  - iam:CreatePolicyVersion
                  - iam:DeletePolicyVersion
                  - iam:TagPolicy
                  - iam:TagOpenIDConnectProvider
                  - iam:UpdateAssumeRolePolicy
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:policy/*"
              - Effect: "Allow"
                Action: 
                  - s3:CreateBucket
                  - s3:GetAccelerateConfiguration
                  - s3:GetBucketAcl
                  - s3:GetBucketCORS
                  - s3:GetBucketLocation
                  - s3:GetBucketLogging
                  - s3:GetBucketObjectLockConfiguration
                  - s3:GetBucketPolicy
                  - s3:GetBucketReplication
                  - s3:GetBucketRequestPayment
                  - s3:GetBucketTagging
                  - s3:GetBucketVersioning
                  - s3:GetBucketWebsite
                  - s3:GetEncryptionConfiguration
                  - s3:GetLifecycleConfiguration
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:PutBucketAcl
                  - s3:PutBucketTagging
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:PutBucketPublicAccessBlock
                  - s3:GetBucketPublicAccessBlock
                  - s3:PutLifecycleConfiguration
                  - s3:ListBucketMultipartUploads
                  - s3:AbortMultipartUpload
                Resource:
                  - !Sub "arn:aws:s3:::${ClusterName}*"
              - Effect: "Allow"
                Action:
                  - s3:ListAllMyBuckets
                Resource: "*"
              - Effect: "Deny"
                Action:
                  - s3:DeleteBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: "*"
                Condition:
                  StringNotLike:
                    s3:prefix:
                      - !Sub "${ClusterName}*"
              - Effect: "Allow"
                Action: 
                  - tag:GetResources
                  - tag:UntagResources
                  - servicequotas:*
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - sts:AssumeRole
                  - sts:AssumeRoleWithWebIdentity
                  - sts:GetCallerIdentity
                  - sts:DecodeAuthorizationMessage
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics              
                  - cloudtrail:DescribeTrails
                  - cloudtrail:LookupEvents
                Resource:
                  - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:*
                  - !Sub arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/*
              - Effect: "Allow"
                Action: 
                  - kms:DescribeKey              
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:GenerateDataKeyWithoutPlainText
                  - kms:DescribeKey
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - Effect: "Allow"
                Action: 
                  - tiros:CreateQuery
                  - tiros:GetQueryAnswer
                  - tiros:GetQueryExplanation
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - elasticfilesystem:*
                Resource:
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/*
              - Effect: "Deny"
                Action:
                  - elasticfilesystem:DeleteFileSystem*
                Resource: "*"
                Condition:
                  StringNotLike:
                    aws:ResourceTag/Name:
                      - !Sub "${ClusterName}*"
              - Effect: "Allow"
                Action: 
                  - ssm:SendCommand
                  - ssm:PutParameter
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*-OpenshiftURL"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*_CleanupStatus"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/AWS-RunShellScript"    
              - Effect: Allow
                Action:
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
              - Effect: "Allow"
                Action: 
                  - secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*_CleanupStatus"
                Condition:
                  StringEquals:
                    aws:ResourceTag/red-hat-managed: true

  OpenshiftURL:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-OpenshiftURL"
        - ClusterName: !Ref ClusterName

  ROSAAPI:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-ROSAAPI"
        - ClusterName: !Ref ClusterName

  ROSAUsername:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-Openshift-Username"
        - ClusterName: !Ref ClusterName

  ROSAPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-Openshift-Password"
        - ClusterName: !Ref ClusterName

  OCLoginCommand:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-cluster-login-command"
        - ClusterName: !Ref ClusterName
  # CP4I
  CP4IURL:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-CP4I-URL"
        - ClusterName: !Ref ClusterName

  CP4IUsername:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-CP4I-Username"
        - ClusterName: !Ref ClusterName

  CP4IPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 
        - "${ClusterName}-CP4I-Password"
        - ClusterName: !Ref ClusterName
  
  BootnodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - Ref: "BootNodeIamRole"

  BootnodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Bootnode Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BootNodeAccessCIDR
      VpcId: !Ref VPCID

  BootnodeInstance:
    DependsOn: BootNodeIamRole  
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Required:
            - StackPropertiesFile
        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                AWS_REGION=${AWS::Region}
                AWS_STACKID="${AWS::StackId}"
                AWS_STACKNAME="${AWS::StackName}"
              mode: '000644'
              owner: root
              group: root
            /home/ec2-user/destroy.sh:
              content: !Sub |
                echo "StackName $1, ClusterName $2, Region $3, RosaToken $4"
                export HOME=/home/ec2-user
                cd /home/ec2-user
                ./setup-efs.sh --base-path=/home/ec2-user --operation=destroy >> /home/ec2-user/destroy.log
                ./install-rosa.sh --base-path=/home/ec2-user \
                  --operation=destroy \
                  --cluster-name=$2 \
                  --region=$3 \
                  --rosa-token=$4 >> /home/ec2-user/destroy.log
                aws ssm put-parameter --name $1"_CleanupStatus" --type "String" --value "READY" --overwrite
              mode: '000755'
              owner: root
              group: root
            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
              mode: '000600'
              owner: root
              group: root
            /home/ec2-user/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
              mode: '000600'
              owner: ec2-user
              group: ec2-user

    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", BootNodeAmiId]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp3  
      IamInstanceProfile: !Ref BootnodeInstanceProfile
      Tags:
        - Key: Name
          Value: 
            !Sub
            - "${ClusterName}-bootnode"
            - ClusterName: !Ref ClusterName 
      InstanceType: t3.large 
      NetworkInterfaces:
      - GroupSet:
        - !Ref BootnodeSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: '0'
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet1ID  
      UserData:
        Fn::Base64:
          !Sub 
          - |
            #!/bin/bash -x

            # Install utils
            yum update
            yum install -y git podman wget jq python39 unzip yum-utils gettext
            yum install -y yum-utils
            yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            yum -y install terraform

            podman version

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install &> /var/log/userdata.awscli_install.log
            cp /usr/local/bin/aws /usr/bin/

            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            sed -i "s/aws-cfn-bootstrap-latest.tar.gz/aws-cfn-bootstrap-py3-latest.tar.gz/g" /quickstart-linux-utilities/quickstart-cfn-tools.source 
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err "cfn bootstrap failed"
            pip3 install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BootnodeInstance --configsets Required --region ${AWS::Region}
            #/opt/aws/apitools/cfn-init -v --stack ${AWS::StackName} --resource BootnodeInstance --configsets Required --region ${AWS::Region}

            cd /tmp
            qs_retry_command 10 wget https://s3-us-west-1.amazonaws.com/amazon-ssm-us-west-1/latest/linux_amd64/amazon-ssm-agent.rpm
            qs_retry_command 10 yum install -y ./amazon-ssm-agent.rpm
            systemctl start amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            rm -f ./amazon-ssm-agent.rpm

            wget https://get.helm.sh/helm-v3.9.4-linux-amd64.tar.gz
            tar -zxvf helm-v3.9.4-linux-amd64.tar.gz 
            mv linux-amd64/helm /usr/local/bin/helm

            # Install openshift util version
            wget "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OpenshiftVersion}/openshift-client-linux-${OpenshiftVersion}.tar.gz"
            tar -xvf openshift-client-linux-${OpenshiftVersion}.tar.gz
            
            chmod u+x oc kubectl
            mv oc /usr/local/bin
            cp /usr/local/bin/oc /usr/bin/

            mv kubectl /usr/local/bin
            cp /usr/local/bin/kubectl /usr/bin/

            export ICPDInstallationCompletedURL='${ICPDInstallationCompletedHandle}'
            export AWS_REGION=${AWS::Region}
            export AWS_STACKID=${AWS::StackId}
            export AWS_STACKNAME=${AWS::StackName}

            chmod +x /home/ec2-user/destroy.sh

            # clone cp4i terraform repo
            export HOME=/home/ec2-user
            cd $HOME

            #clone scripts
            git clone https://github.com/IBM/aws-marketplace-cp4i.git
            cp ./aws-marketplace-cp4i/cp4i-cfn/scripts/* $HOME/
            rm -rf $HOME/aws-marketplace-cp4i/
            chmod u+x deploy-cp4i.sh install-rosa.sh setup-efs.sh store-secrets.sh

            if [ ${AZ} == "multi_zone"  ]; then
              MULTI_AZ="true"
              ROSA_SUBNETS=${PrivateSubnet1ID},${PrivateSubnet2ID},${PrivateSubnet3ID},${PublicSubnet1ID},${PublicSubnet2ID},${PublicSubnet3ID}
              EFS_SUBNETS=${PrivateSubnet1ID},${PrivateSubnet2ID},${PrivateSubnet3ID}
            else 
              MULTI_AZ="false"
              ROSA_SUBNETS=${PrivateSubnet1ID},${PublicSubnet1ID}
              EFS_SUBNETS=${PrivateSubnet1ID}
            fi

            # create ROSA cluster
            /bin/bash $HOME/install-rosa.sh --base-path=$HOME --operation=create --cluster-name=${ClusterName} \
              --compute-machine-type=${WorkerVMSize} \
              --replicas=${WorkerNodeQuantity} \
              --region=$AWS_REGION \
              --machine-cidr=${MachineCIDR} \
              --service-cidr=${ServiceNetworkCIDR} \
              --pod-cidr=${ClusterNetworkCIDR} \
              --host-prefix=${ClusterNetworkHostPrefix} \
              --private=${PrivateCluster} \
              --multi-az=$MULTI_AZ \
              --version=${OpenshiftVersion} \
              --subnets=$ROSA_SUBNETS \
              --fips=${EnableFips} \
              --rosa-token=${RosaToken}

            ecode=$?
            if [ $ecode -gt 0 ]; then
              echo "ROSA cluster creation is failed"
              /usr/local/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at /var/log/cloud-init-output.log" $ICPDInstallationCompletedURL
              exit 1;
            fi

            # setup EFS
            if [ ${StorageType} == "efs" ]; then
              /bin/bash $HOME/setup-efs.sh --base-path=$HOME \
              --operation=create \
              --subnets=$EFS_SUBNETS
            fi

            ecode=$?
            if [ $ecode -gt 0 ]; then
              echo "ROSA storage creation is failed"
              /usr/local/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at /var/log/cloud-init-output.log" $ICPDInstallationCompletedURL
              exit 1;
            fi

            # deploy CP4I
            /bin/bash $HOME/deploy-cp4i.sh --base-path=$HOME \
              --license=${LicenseAgreement} \
              --ibm-entitlement-key=${EntitlementKey} \
              --namespace=${PlatformUiNamespace} \
              --intance-namespace=${PlatformUiNamespace} \
              --version=${CloudPakVersion} \
              --license-id=${CloudPakLicense}
            
            ecode=$?

            sudo chown -R ec2-user:ec2-user /home/ec2-user
            if [ $ecode -gt 0 ]; then
              echo "CP4I deployment is failed"
              /usr/local/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at /var/log/cloud-init-output.log" $ICPDInstallationCompletedURL
              exit 1;
            else
              /bin/bash $HOME/store-secrets.sh --base-path=$HOME --cluster-name=${ClusterName} --instance-namespace=${PlatformUiNamespace} || true
            fi

            ecode=$?
            /usr/local/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at /var/log/cloud-init-output.log" $ICPDInstallationCompletedURL
          -
            LicenseAgreement: !If [ AcceptLicense, 'accept', 'reject']
            AZ: !If [ 3AZCondition , 'multi_zone', 'single_zone']
            AvailabilityZone1: !Select [0, !Ref AvailabilityZones]
            AvailabilityZone2: !If [ 3AZCondition, !Select [1, !Ref AvailabilityZones], ""]
            AvailabilityZone3: !If [ 3AZCondition, !Select [2, !Ref AvailabilityZones], ""]
            EnableOCS: !If [ OCSCondition, 'true', 'false' ]
            EnableEFS: !If [ EfsCondition, 'true', 'false' ]

  CleanUpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import os
          import traceback
          import time
          def handler(event, context):
              responseData = {}
              try:
                  print("event_obj:",json.dumps(event))
                  print(event['RequestType'])
                  if event['RequestType'] == 'Delete':
                    print("Run unsubscribe script")
                    ssm = boto3.client('ssm',region_name=os.environ['Region'])
                    instanceID = os.environ['BootNode']
                    storage = os.environ['Storage']
                    stackname = os.environ['StackName']
                    clustername = os.environ['ClusterName']
                    region = os.environ['Region']
                    rosatoken = os.environ['RosaToken']
                    print(instanceID)
                    response = ssm.send_command(Targets=[{"Key":"instanceids","Values":[instanceID]}],
                            DocumentName="AWS-RunShellScript",
                            Parameters={"commands":["/home/ec2-user/destroy.sh %s %s %s %s" %(stackname, clustername, region, rosatoken)],
                                        "executionTimeout":["1200"],
                                        "workingDirectory":["/home/ec2-user"]},
                            Comment="Execute script in uninstall openshift",
                            TimeoutSeconds=120)
                    print(response)
                    current_status = "WAIT"
                    final_status = "READY"
                    parameterName = stackname+"_CleanupStatus"           
                    response = ssm.put_parameter(Name=parameterName,
                           Description="Waiting for CleanupStatus to be READY",
                           Value=current_status,
                           Type='String',
                           Overwrite=True)        
                    print(response)    
                    while(current_status!=final_status):
                      time.sleep(30) 
                      response = ssm.get_parameter(Name=parameterName)
                      parameter = response.get('Parameter')
                      current_status = parameter.get('Value')
                      print(current_status)
                    ssm.delete_parameter(Name=parameterName)    
              except Exception as e:
                print(e)
                traceback.print_exc()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
      Environment:
        Variables:
          Region: !Ref AWS::Region
          BootNode: !Ref BootnodeInstance
          Storage: !Ref StorageType
          StackName: !Ref AWS::StackName
          ClusterName: !Ref ClusterName
          RosaToken: !Ref RosaToken
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 600
             
  Cleanup:
    Type: Custom::Cleanup
    Properties:
      DependsOn: BootnodeInstance
      ServiceToken: !GetAtt 'CleanUpLambda.Arn'
 
  ICPDInstallationCompletedHandle:
    Type: AWS::CloudFormation::WaitConditionHandle  

  ICPDInstallationCompleted:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref ICPDInstallationCompletedHandle
      Timeout: '40000'  

Outputs:
  CP4IURLValue:
    Description: CP4I login page URL.
    Value: !Ref 'CP4IURL'
  CP4IUsernameValue:
    Description: CP4I login id.
    Value: !Ref 'CP4IUsername'
  CP4IPasswordValue:
    Description: CP4I password.
    Value: !Ref 'CP4IPassword'
  OpenshiftURLValue:
    Description: The URL for the OpenShift UI.
    Value: !Ref 'OpenshiftURL'
  OpenshiftApi:
    Description: OpenShift API.
    Value: !Ref 'ROSAAPI'
  OpenshiftUsername:
    Description: OpenShift Username.
    Value: !Ref 'ROSAUsername'
  OpenshiftPassword:
    Description: OpenShift password.
    Value: !Ref 'ROSAPassword'
  Openshiftlogincommand:
    Description: ROSA login command.
    Value: !Ref 'OCLoginCommand'      